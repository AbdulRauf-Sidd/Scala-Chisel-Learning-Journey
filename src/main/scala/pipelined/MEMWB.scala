package pipelined
import chisel3._
import chisel3.util._

class MEMWB extends  Module {
    val io = IO(new Bundle {
        // val memWrite_in = Input(Bool())
        // val branch_in = Input(Bool())
        val memRead_in = Input(Bool())
        val regWrite_in = Input(Bool())
        val memtoReg_in = Input(Bool())
        //val aluOperation_in = Input(UInt(3.W))
        //val operand_A_sel_in = Input(UInt(2.W))
        //val operand_B_sel_in = Input(Bool())
        //val extend_sel_in = Input(UInt(2.W))
        // val next_PC_sel_in = Input(UInt(2.W))
        //val pc_4_in = Input(UInt(32.W))
        //val pc_in = Input(UInt(32.W))
        //val rs1_in = Input(SInt(32.W))
        //val rs2_in = Input(SInt(32.W))
        //val funct3_in = Input(UInt(3.W))
        //val funct7_in = Input(UInt(1.W))
        //val rs1_sel_in = Input(UInt(5.W))
        // val rs2_sel_in = Input(UInt(5.W))
        val rd_sel_in = Input(UInt(5.W))
        val alu_in = Input(SInt(32.W))
        val dataMem_in = Input(SInt(32.W))
        //val pc_4_out = Output(UInt(32.W))
        //val pc_out = Output(UInt(32.W))
        //val rs1_out = Output(SInt(32.W))
        //val rs2_out = Output(SInt(32.W))
        //val funct3_out = Output(UInt(3.W))
        //val funct7_out = Output(UInt(1.W))
        //val rs1_sel_out = Output(UInt(5.W))
        // val rs2_sel_out = Output(UInt(5.W))
        val rd_sel_out = Output(UInt(5.W))
        val alu_out = Output(SInt(32.W))
        // val memWrite_out = Output(Bool())
        // val branch_out = Output(Bool())
        val memRead_out = Output(Bool())
        val regWrite_out = Output(Bool())
        val memtoReg_out = Output(Bool())
        val dataMem_out = Output(SInt(32.W))
        //val aluOperation_out = Output(UInt(3.W))
        //val operand_A_sel_out = Output(UInt(2.W))
        //val operand_B_sel_out = Output(Bool())
        //val extend_sel_out = Output(UInt(2.W))
        //val next_PC_sel_out = Output(UInt(2.W)) 
    })
    // io.pc_4_out = RegNext(io.pc_4_in)
    // io.pc_out = RegNext(io.pc_in)
    // io.rs1_out = RegNext(io.rs1_in)
    //io.rs2_out = RegNext(io.rs2_in)
    // io.funct3_out = RegNext(io.funct3_in)
    // io.funct7_out = RegNext(io.funct7_in)
    // io.rs1_sel_out = RegNext(io.rs1_sel_in)
    // io.rs2_sel_out = RegNext(io.rs2_sel_in)
    io.rd_sel_out := RegNext(io.rd_sel_in)
    io.alu_out := RegNext(io.alu_in)
    // io.memWrite_out = RegNext(io.memWrite_in)
    // io.branch_out := RegNext(io.branch_in)
    io.memRead_out := RegNext(io.memRead_in)
    io.regWrite_out := RegNext(io.regWrite_in)
    io.memtoReg_out := RegNext(io.memtoReg_in)
    io.dataMem_out := RegNext(io.dataMem_in)
    // io.aluOperation_out = RegNext(io.aluOperation_in)
    // io.operand_A_sel_out = RegNext(io.operand_A_sel_in)
    // io.operand_B_sel_out = RegNext(io.operand_B_sel_in)
    // io.extend_sel_out = RegNext(io.extend_sel_in)
    // io.next_PC_sel_out = RegNext(io.next_PC_sel_in)    
}